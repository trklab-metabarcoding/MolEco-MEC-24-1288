---
title: "Correlations between plant species and DNA barcode availability"
format: html
global: true
params:
  today: '!r format(Sys.Date(), "%Y%m%d")'
---

This notebook pulls in data from various sources and makes plots to compare plants species per family to availability of DNA barcodes.

```{r install_pkgs, results='hide', message=FALSE, warning=FALSE}
# Set a specific CRAN mirror
options(repos = c(CRAN = "https://cloud.r-project.org/"))

## First check for the required packages, install if needed, and load the libraries.
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("sangerseqR")
remotes::install_github("ropensci/bold")
remotes::install_github("ropensci/taxize")

if (!require("pacman")) install.packages("pacman")
pacman::p_load(maps, ggplot2, dplyr, countrycode, rgbif, data.table, raster, mapproj, sf, glue)
```

## SI Appendix Figure 2A-D: Read in files and summarize for panels A-B.

#### First we read in the data and make some quick plots.

The `combtab` data corresponds to the Supplemental Dataset S1 from the publication.

```{r}
combtab <- read.csv("../data/Kartzinel_et_al_Dataset_S1_20240725.csv")
head(combtab, 2)

# Round coordiantes to nearest 1 degree
combtab$lat <- as.numeric(as.character(combtab$Latitude))
combtab$lon <- as.numeric(as.character(combtab$Longitude))

# Phylum rank
barplot(sort(table(combtab$Phylum), decreasing=T), main = "Most barcoded Phyla")

# Family rank
head(sort(table(combtab$Family), decreasing=T), 10)

barplot(sort(table(combtab$Family), decreasing=T), main = "Most barcoded Families")

head(table(combtab$Family, combtab$Multiple.markers), 2)

# the most barcoded plant species in the world
sort(table(combtab$Species), decreasing=T)[1:5] # by specimens
```

#### Plot family abundances in ITIS and compare with barcodes: this section gives us panels A and B of the figure

The `infam` data corresponds to the Supplemental Dataset S2 from the publication.

```{r}
infam <- read.csv("../data/allFamNames.csv")
ITISfamcount <- sort(table(infam$family), decreasing=T)

# Create a useful matrix for summarizing the BOLD counts with respect to ITIS matches
famcountmat <- matrix(0, nrow = length(ITISfamcount), ncol = 9)
colnames(famcountmat)<-c("rank", "ITISfamname", "ITISfamcount", "BOLDspecimencount", "BOLDspeccount", "trnLcount", "rbcLcount", "matKcount", "ITScount")
  famcountmat<-data.frame(famcountmat)
  famcountmat[,1]<-seq(1,length(ITISfamcount))
  famcountmat[,2]<-names(ITISfamcount)
  famcountmat[,3]<-ITISfamcount

# Make count of specimens by family 
combtabfamilycount <- table(combtab$Family)
famcountmat[,4] <- combtabfamilycount[match(famcountmat[,2], names(combtabfamilycount))]

# Make count of species by family
combtabspeciescount <- tapply(combtab$Species, combtab$Family, function(x) length(unique(x)))
famcountmat[,5] <- combtabspeciescount[match(famcountmat[,2], names(combtabspeciescount))]

# Make count of trnL by family
combtabtrnLcount <- tapply(combtab$trnL, combtab$Family, function(x) length(which(x == "trnL")))
famcountmat[,6] <- combtabtrnLcount[match(famcountmat[,2], names(combtabtrnLcount))]
  
# Make count of rbcL by family
combtabrbcLcount <- tapply(combtab$rbcL, combtab$Family, function(x) length(which(x=="rbcL")))
famcountmat[,7] <- combtabrbcLcount[match(famcountmat[,2], names(combtabrbcLcount))]
  
# Make count of matK by family
combtabmatKcount <- tapply(combtab$matK, combtab$Family, function(x) length(which(x=="matK")))
famcountmat[,8] <- combtabmatKcount[match(famcountmat[,2], names(combtabmatKcount))]
  
# Make count of ITS by family
combtabITScount <- tapply(combtab$ITS, combtab$Family, function(x) length(which(x=="ITS")))
famcountmat[,9] <- combtabITScount[match(famcountmat[,2], names(combtabITScount))]

write.csv(famcountmat, "../data/DatasetS2_trnL_rbcL_matK_ITS.csv")
```

#### Summarize the data:

```{r}
get_genera_from_family <- function(family_name) {
  tsn <- get_tsn(family_name, rows = 1, db = "itis")
  
  if (!is.na(tsn)) {
    result <- downstream(tsn, downto = "genus", db = "wfo")
    if (!is.null(result[[1]])) {
      return(result[[1]]$taxonname)
    }
  }
  return(NULL)
}
```

```{r}
install.packages("rgbif")
library(rgbif)

# Function to get genera from GBIF
get_genera_gbif <- function(family) {
  res <- name_backbone(name = family, rank = "family")  # Get family details
  if (!is.null(res$usageKey)) {
    # Search for genera within this family
    genera_data <- name_usage(key = res$usageKey, rank = "genus", limit = 100)
    return(unique(genera_data$data$scientificName))
  } else {
    return(NULL)
  }
}

# Example list of plant families
plant_families <- c("Poaceae", "Fabaceae", "Asteraceae", "Orchidaceae", "Rosaceae")

# Retrieve genera for each family
all_genera <- lapply(plant_families, get_genera_gbif)
names(all_genera) <- plant_families

# Print results
print(all_genera)
```

```{r}
# Number of taxa
nrow(famcountmat)
sum(famcountmat$ITISfamcount)
range(famcountmat$ITISfamcount)
quantile(famcountmat$ITISfamcount)
median(famcountmat$ITISfamcount)

# Number of family names in ITIS with barcodes
length(which(is.na(famcountmat$BOLDspecimencount) == F))
length(which(is.na(famcountmat$BOLDspecimencount) == F))/nrow(famcountmat)

# Number of family names ITIS without barcodes
length(which(is.na(famcountmat$BOLDspecimencount)))
length(which(is.na(famcountmat$BOLDspecimencount)))/nrow(famcountmat)

# Characterize the no-barcode families (i.e., "nbc" families)
nbcfams <- famcountmat[which(is.na(famcountmat$BOLDspecimencount)),]
nbcfams <- nbcfams[order(nbcfams$ITISfamcount),] # reorder by ITIS fam size
head(nbcfams, 2)
tail(nbcfams, 2)
sum(nbcfams[,3])
dim(nbcfams)
head(sort(nbcfams$ITISfamname), 2) 
range(nbcfams$ITISfamcount)
hist(nbcfams$ITISfamcount)
median(nbcfams$ITISfamcount)

head(nbcfams[order(nbcfams[,3]),], 2)

head(nbcfams[which(nbcfams[,3] == 1),], 2)
dim(nbcfams[which(nbcfams[,3] == 1),])
nrow(nbcfams[which(nbcfams[,3] == 1),])/nrow(nbcfams)

head(nbcfams[which(nbcfams[,3]<5),], 2)
dim(nbcfams[which(nbcfams[,3]<5),])
nrow(nbcfams[which(nbcfams[,3]<5),])/nrow(nbcfams)

head(nbcfams[which(nbcfams$ITISfamname == "Heliophytaceae"),], 2)
head(nbcfams[which(nbcfams$ITISfamname == "Calliergonaceae"),], 2)
```

```{r}
# Summarize families in BOLD not in ITIS
boldfamnames <- unique(combtab$Family)
length(boldfamnames) #651

# Families in BOLD not matched by ITIS
nomatchnames <- boldfamnames[which(boldfamnames %in% famcountmat$ITISfamname == F)]
nomatchnames <- nomatchnames[which(nomatchnames != "")]
length(nomatchnames) #42
length(nomatchnames)/length(boldfamnames) #0.06451613

# Counts of specimens in families in BOLD not matched by ITIS
combtab$family_name <- factor(combtab$Family)
head(sort(table(droplevels(combtab[which(combtab$family_name %in% nomatchnames),]$family_name)), decreasing=T), 2)

sum(sort(table(droplevels(combtab[which(combtab$family_name %in% nomatchnames),]$family_name)), decreasing=T))

sum(sort(table(droplevels(combtab[which(combtab$family_name %in% nomatchnames),]$family_name)), decreasing=T))/nrow(combtab)

median(sort(table(droplevels(combtab[which(combtab$family_name %in% nomatchnames),]$family_name)), decreasing=T))

# Number of specimens not identified to family
length(which(combtab$family_name == ""))
```

## SI Appendix Figure 2A-D: Plot panels A-B

```{r}
# Plot family count by specimens: Panel A
plotcorrs <- famcountmat[complete.cases(famcountmat[,3:4]),] 
summary(lm(log(as.numeric(plotcorrs$BOLDspecimencount)) ~ log(as.numeric(plotcorrs$ITISfamcount))))

plotcorrs_ggplot_BOLDspecimen_ITISfamily <- ggplot(
  plotcorrs, aes(x=log(ITISfamcount), y=log(BOLDspecimencount))) + 
  geom_point(pch = 1) + 
  theme_classic() + 
  xlab("Log of ITIS family count") + 
  ylab("Log of BOLD specimen count") + 
  geom_abline(intercept = 0, slope = 1, color = "black", linewidth = 1, linetype = "dashed") + 
  geom_smooth(method = "lm", se=FALSE, linewidth=1, color = "darkgreen") +
  scale_y_continuous(breaks = seq(0,9, by = 3)) + 
  scale_x_continuous(breaks = seq(0,9, by = 3))
plotcorrs_ggplot_BOLDspecimen_ITISfamily
#ggsave("plotcorrs_ggplot_BOLDspecimen_ITISfamily.pdf", plotcorrs_ggplot_BOLDspecimen_ITISfamily, width = 10, height = 8, units = "cm")
		
# Summary stats for panel A
plotcorrs_summary <- plotcorrs %>% dplyr::summarize(sumspecimens = sum(BOLDspecimencount))
plotcorrs_summary
```

```{r}
# Plot family count by species: PANEL B
plotcorrs_ggplot_BOLDspecies_ITISfamily <- ggplot(
  plotcorrs, aes(x=log(ITISfamcount), y=log(BOLDspeccount))) + 
  geom_point(pch = 1) + 
  theme_classic() + 
  xlab("Log of ITIS family count") + 
  ylab("Log of BOLD species count") + 
  geom_abline(intercept = 0, slope = 1, color = "black", linewidth = 1, linetype = "dashed") + 
  geom_smooth(method = "lm", se=FALSE, linewidth=1, color = "darkgreen") +
  scale_y_continuous(breaks = seq(0,9, by = 3)) + scale_x_continuous(breaks = seq(0,9, by = 3))
plotcorrs_ggplot_BOLDspecies_ITISfamily 
#ggsave("plotcorrs_ggplot_BOLDspecies_ITISfamily.pdf", plotcorrs_ggplot_BOLDspecies_ITISfamily, width = 10, height = 8, units = "cm")
		
#summary stats for panel B
plotcorrs_summary <- plotcorrs %>% summarize(sumspecies = sum(BOLDspeccount))
plotcorrs_summary
```

## SI Appendix Figure 2A-D: Read in files and summarize for panels C-D.

Now read in the data from downloading all *trnL* P6 data from the European Nucleotide Archive at [EMBL-EBI](https://www.ebi.ac.uk/ena/browser/home). More details for the download can be found in the "Building the datasets" section of the Methods in the publication. This data corresponds to dataset S3 in the Supplement.

```{r}
emblp6 <- read.csv("../data/Kartzinel_et_al_Dataset_S3_20240725.csv")
nrow(emblp6)
length(unique(emblp6$trnL.P6.sequence)) # number of unique sequences 
#levels(factor(emblp6$Family)) # uncomment and run to print out all the family names
length(unique(emblp6$Family))
157020/5324 # fold difference between number in BOLD vs EMBL
emblp6_nofamily <- subset(emblp6, Family == "")

# Build the same kind of matrix as above
famcountmatp6 <- matrix(0, nrow = length(ITISfamcount), ncol = 5)
colnames(famcountmatp6) <- c("rank", "ITISfamname", "ITISfamcount", "p6seqcount", "p6speccount")
famcountmatp6 <- data.frame(famcountmatp6)
famcountmatp6[,1] <- seq(1,length(ITISfamcount))
famcountmatp6[,2] <- names(ITISfamcount)
famcountmatp6[,3] <- ITISfamcount
length(unique(emblp6$Family))
#unique(emblp6$family_name) # uncomment to print out all the family names

write.csv(famcountmatp6, "../data/DatasetS2_P6_additions.csv")

# Make count of specimens by family
emblp6count <- table(emblp6$Family)
famcountmatp6[,4] <- emblp6count[match(famcountmatp6[,2], names(emblp6count))]
length(emblp6count)
sum(emblp6count)

# Make count of species by family
emblp6speciescount <- tapply(emblp6$Species, emblp6$Family, function(x) length(unique(x)))
famcountmatp6[,5] <- emblp6speciescount[match(famcountmatp6[,2], names(emblp6speciescount))]
```

#### Summarize the data:

```{r}
# Number of taxa
nrow(famcountmatp6)
sum(famcountmatp6$ITISfamcount)
range(famcountmatp6$ITISfamcount)
quantile(famcountmatp6$ITISfamcount)
median(famcountmatp6$ITISfamcount)

# Number of family names in ITIS with barcodes
length(which(is.na(famcountmatp6$p6seqcount) == F))
length(which(is.na(famcountmatp6$p6seqcount) == F))/nrow(famcountmatp6)

# Number of family names ITIS without barcodes
length(which(is.na(famcountmatp6$p6seqcount)))
length(which(is.na(famcountmatp6$p6seqcount)))/nrow(famcountmatp6)

# Characterize the no-barcode families
nbcfamsp6 <- famcountmatp6[which(is.na(famcountmatp6$p6seqcount)),]
nbcfamsp6 <- nbcfamsp6[order(nbcfamsp6$ITISfamcount),] # reorder by ITIS fam size
head(nbcfamsp6, 2)
tail(nbcfamsp6, 2)
sum(nbcfamsp6[,3])
dim(nbcfamsp6)
head(sort(nbcfamsp6 $ITISfamname), 2)
range(nbcfamsp6 $ITISfamcount)
hist(nbcfamsp6 $ITISfamcount)
median(nbcfamsp6 $ITISfamcount)

head(nbcfamsp6[order(nbcfamsp6[,3]),], 2)

head(nbcfamsp6[which(nbcfamsp6[,3]==1),], 2)
dim(nbcfamsp6[which(nbcfamsp6[,3]==1),])
nrow(nbcfamsp6[which(nbcfamsp6[,3]==1),])/nrow(nbcfamsp6)

head(nbcfamsp6[which(nbcfamsp6[,3]<5),], 2)
dim(nbcfamsp6[which(nbcfamsp6[,3]<5),])
nrow(nbcfamsp6[which(nbcfamsp6[,3]<5),])/nrow(nbcfamsp6)

head(nbcfamsp6[which(nbcfamsp6 $ITISfamname=="Heliophytaceae"),], 2)
head(nbcfamsp6[which(nbcfamsp6 $ITISfamname=="Calliergonaceae"),], 2)
```

```{r}
# Summarize families in embl not in ITIS
p6famnames <- unique(emblp6$Family)
length(p6famnames)

# Families in embl not matched by ITIS
nomatchnamesp6 <- p6famnames[which(p6famnames %in% famcountmatp6$ITISfamname == F)]
nomatchnamesp6 <- nomatchnamesp6[which(nomatchnamesp6 != "")]
length(nomatchnamesp6)
length(nomatchnamesp6)/length(p6famnames)

# Counts of specimens in families in embl not matched by ITIS
emblp6$family_name <- factor(emblp6$Family)
head(sort(table(droplevels(emblp6[which(emblp6 $family_name %in% nomatchnamesp6),]$family_name)), decreasing=T), 2)

sum(sort(table(droplevels(emblp6[which(emblp6 $family_name %in% nomatchnamesp6),]$family_name)), decreasing=T))

sum(sort(table(droplevels(emblp6[which(emblp6 $family_name %in% nomatchnamesp6),]$family_name)), decreasing=T))/nrow(combtab)

median(sort(table(droplevels(combtab[which(combtab$family_name %in% nomatchnamesp6),]$family_name)), decreasing=T))

# Number of specimens not identified to family
length(which(emblp6$family_name == ""))
```

#### Write out the Supplemental Dataset S2

```{r}
ds_s2 <- merge(famcountmat, famcountmatp6, by=c("rank","ITISfamname","ITISfamcount"))
write.csv(ds_s2, glue("../data/Kartzinel_et_al_Dataset_S2_{params$today}.csv"))
```

## SI Appendix Figure 2A-D: Plot panels C-D

```{r}
# Plot correlations - family count by specimens: Panel C
plotcorrs <- famcountmatp6[complete.cases(famcountmatp6[,3:4]),]
plotcorrs_ggplot_family_sequences <- ggplot(
  plotcorrs, aes(x=log(ITISfamcount), y=log(p6seqcount))) + 
  geom_point(pch = 1) + 
  theme_classic() + 
  xlab("Log of ITIS family count") + 
  ylab("Log of trnL-P6 sequence count") + 
  geom_abline(intercept = 0, slope = 1, color = "black", linewidth = 1, linetype = "dashed") + 
  geom_smooth(method = "lm", se=FALSE, linewidth=1, color = "darkgreen") +
  scale_y_continuous(breaks = seq(0,9, by = 3)) + 
  scale_x_continuous(breaks = seq(0,9, by = 3))
plotcorrs_ggplot_family_sequences
#ggsave("plotcorrs_ggplot_family_sequences.pdf", plotcorrs_ggplot_family_sequences, width = 10, height = 8, units = "cm")

# Summarize for panel C
plotcorrs_summary <- plotcorrs %>% dplyr::summarize(sumP6sequences = sum(p6seqcount))
plotcorrs_summary
```

```{r}
# Family count by species: Panel D
plotcorrs_ggplot_family_sequencespecies <- ggplot(
  plotcorrs, aes(x=log(ITISfamcount), y=log(p6speccount))) + 
  geom_point(pch = 1) + 
  theme_classic() + 
  xlab("Log of ITIS family count") + 
  ylab("Log of trnL-P6 species count") + 
  geom_abline(intercept = 0, slope = 1, color = "black", linewidth = 1, linetype = "dashed") + 
  geom_smooth(method = "lm", se=FALSE, linewidth=1, color = "darkgreen")  +
  scale_y_continuous(breaks = seq(0,9, by = 3)) + 
  scale_x_continuous(breaks = seq(0,9, by = 3))
plotcorrs_ggplot_family_sequencespecies			
#ggsave("plotcorrs_ggplot_family_sequencespecies.pdf", plotcorrs_ggplot_family_sequencespecies, width = 10, height = 8, units = "cm")

# Summarize for panel D
plotcorrs_summary <- plotcorrs %>% summarize(sump6speccount = sum(p6speccount))
plotcorrs_summary
```
