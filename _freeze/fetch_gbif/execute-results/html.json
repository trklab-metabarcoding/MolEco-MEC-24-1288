{
  "hash": "54f87485a329cbba207d507885a011c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Fetching plant occurrence records from GBIF\"\nformat: html\n---\n\n\n\n\nThis notebook contains code used to pull plant species occurrence records from the [GBIF API](https://techdocs.gbif.org/en/openapi/).\n\nWe use `pacman` to mange the R packages and load libraries.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## First check for the required packages, install if needed, and load the libraries.\nif (!requireNamespace(\"BiocManager\", quietly = TRUE))\n    install.packages(\"BiocManager\")\n\nBiocManager::install(\"sangerseqR\")\nremotes::install_github(\"ropensci/bold\")\n\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(dplyr, curl, zip, readr, rgbif, usethis, stringr)\n```\n:::\n\n\n\n\n### Read in BOLD species list and obtain GBIF keys\n\nThis block uses a site-specific list of species from the Yellowstone BOLD project to pull any taxon keys for those species hosted on GBIF, matched by exact scientific names.\n\nThe list of species we used can be accessed from @bold_data, and filtered for *trnL.*\n\nSimilarly, and data from a BOLD project could be downloaded and used in this analysis to generate a similar map of global coverage from a localized sampling effort.\n\nThe data being read in for this block is data set S4 in the Supplement provided with the publication.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_list <- readr::read_csv(\"../data/Kartzinel_et_al_Dataset_S4_20241030.csv\") %>%\n  pull(\"Species\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 570 Columns: 62\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (36): Project Code, Process ID, Sample ID, Field ID, rbcL Seq. Length, r...\ndbl  (7): rbcL Trace Count, matK Trace Count, trnL-F Trace Count, trnH-psbA ...\nlgl (19): BIN, Catalog Num, Image Count, Contamination, Stop Codon, Flagged ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Get all backbone results (without filtering)\nall_matches <- name_backbone_checklist(species_list, kingdom = \"plants\")\n\nexact_key_matches <- all_matches %>%\n  filter(matchType == \"EXACT\") %>%\n  select(usageKey) %>%\n  as.list()\n\n# Find taxa that didn't match at species level.\nnot_exact_matches <- all_matches %>%\n  filter(matchType != \"EXACT\")\n```\n:::\n\n\n\n\n### Investigate taxon keys for fuzzy matches and higher rank matches\n\nSome keys may indicate that local species are sharing a taxon key, or the keys returned were backed off to higher taxonomic levels. Beware that these can result in many more occurrence records matched at higher taxonomic levels. This can happen for hyper-local species with no occurrence records in GBIF. For our purposes, we kept only exact species matches.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View results\nnot_exact_matches\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 53 × 26\n   usageKey scientificName       canonicalName rank  status confidence matchType\n      <int> <chr>                <chr>         <chr> <chr>       <int> <chr>    \n 1  3033620 Pulsatilla Mill.     Pulsatilla    GENUS ACCEP…         99 HIGHERRA…\n 2  2704858 Calamagrostis Adans. Calamagrostis GENUS ACCEP…         96 HIGHERRA…\n 3     3064 Amaranthaceae        Amaranthaceae FAMI… ACCEP…         99 HIGHERRA…\n 4  3171742 Erythranthe Spach    Erythranthe   GENUS ACCEP…         99 HIGHERRA…\n 5  8148051 Bistorta (L.) Scop.  Bistorta      GENUS ACCEP…         99 HIGHERRA…\n 6  8148051 Bistorta (L.) Scop.  Bistorta      GENUS ACCEP…         99 HIGHERRA…\n 7  8148051 Bistorta (L.) Scop.  Bistorta      GENUS ACCEP…         99 HIGHERRA…\n 8       NA <NA>                 <NA>          <NA>  <NA>          100 NONE     \n 9       NA <NA>                 <NA>          <NA>  <NA>          100 NONE     \n10       NA <NA>                 <NA>          <NA>  <NA>          100 NONE     \n# ℹ 43 more rows\n# ℹ 19 more variables: kingdom <chr>, phylum <chr>, order <chr>, family <chr>,\n#   genus <chr>, species <chr>, kingdomKey <int>, phylumKey <int>,\n#   classKey <int>, orderKey <int>, familyKey <int>, genusKey <int>,\n#   speciesKey <int>, synonym <lgl>, class <chr>, acceptedUsageKey <int>,\n#   verbatim_name <chr>, verbatim_index <dbl>, verbatim_kingdom <chr>\n```\n\n\n:::\n:::\n\n\n\n\nWe had 6 species that did not match a species key, resulting in 98% of the species having data we can use from GBIF to explore global geographic coverage of these species.\n\n### Set GBIF credentials\n\nThe following block will open your .Renviron file. Register an account with GBIF on their website and then add these environment variables to the .Renviron and save: GBIF_USER=\"user\" GBIF_PWD=\"password\" GBIF_EMAIL=\"email\".\n\nAfter requesting the data based on our list of taxon keys, we will get millions of occurrence records that we can download; the data will be help in your GBIF portal.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_environ()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n☐ Edit '/Users/tdivoll/.Renviron'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n☐ Restart R for changes to take effect.\n```\n\n\n:::\n:::\n\n\n\n\n### Request the occurrence data\n\nWe'll further restrict the data returned to records that have reliable coordinate data, and use a simple CSV format to reduce the size of the data. The Darwin Core Archive format will include much more metadata, but we're only interested in the locations for this analysis.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbif_data_BOLDlist <- occ_download(\n  pred_in(\"taxonKey\", exact_key_matches$usageKey),\n  pred(\"hasCoordinate\", TRUE),\n  pred(\"hasGeospatialIssue\", FALSE),\n  format = \"SIMPLE_CSV\"\n)\n```\n:::\n\n\n\n\n### Get metadata and wait\n\nGet the metadata about the request.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbif_data_BOLDlist # this will print some info, including the download ID we need to check on the job\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<<gbif download>>\n  Your download is being processed by GBIF:\n  https://www.gbif.org/occurrence/download/0007289-250127130748423\n  Most downloads finish within 15 min.\n  Check status with\n  occ_download_wait('0007289-250127130748423')\n  After it finishes, use\n  d <- occ_download_get('0007289-250127130748423') %>%\n    occ_download_import()\n  to retrieve your download.\nDownload Info:\n  Username: tdivoll\n  E-mail: timothy_divoll@brown.edu\n  Format: SIMPLE_CSV\n  Download key: 0007289-250127130748423\n  Created: 2025-02-01T12:16:59.420+00:00\nCitation Info:  \n  Please always cite the download DOI when using this data.\n  https://www.gbif.org/citation-guidelines\n  DOI: 10.15468/dl.7bdmx3\n  Citation:\n  GBIF Occurrence Download https://doi.org/10.15468/dl.7bdmx3 Accessed from R via rgbif (https://github.com/ropensci/rgbif) on 2025-02-01\n```\n\n\n:::\n:::\n\n\n\n\nCheck the status of the download.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nocc_download_wait('0066939-241126133413365')\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nstatus: succeeded\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\ndownload is done, status: succeeded\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<<gbif download metadata>>\n  Status: SUCCEEDED\n  DOI: 10.15468/dl.48qedg\n  Format: SIMPLE_CSV\n  Download key: 0066939-241126133413365\n  Created: 2025-01-13T17:50:02.365+00:00\n  Modified: 2025-01-13T18:02:18.702+00:00\n  Download link: https://api.gbif.org/v1/occurrence/download/request/0066939-241126133413365.zip\n  Total records: 20510078\n```\n\n\n:::\n:::\n",
    "supporting": [
      "fetch_gbif_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}